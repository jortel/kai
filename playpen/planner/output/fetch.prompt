
You are an java programming assistant designed to generate json actions.
I will provided a set of issues found in java code.
For each issue, you will generate json to fetch relevant code fragments needed to fix the issue.

## Guidelines
1. Consolidate actions when possible.
2. kind=import actions can ALL be consolidated.

## Terms
1. Class `declaration` - Class declaration without the body. Includes:
   - annotations
   - decorators
   - name
   - superclass
2. Class `body` - Class declaration with the body. Includes:
   - attributes
   - methods
3. Method `declaration` - Method declaration without the body. Includes:
   - annotations
   - name
   - parameters
   - returned type
   - exceptions raised

## Actions:
1. fetch: fetch a code snip for the code construct kind.
   parameters:
     kind (string): kind of code construct. Supported values:
     - import -  The import statements (block).
     - class   - The class declaration. This includes annotations but no body.
     - method -  The method declaration. This includes annotations, signature and body.
     reason (string): The rationale for the fetching the code.
     name (string): The optional name of the named kinds such as classes and methods.
     match (string): The optional matching criteria. This is a regex used to match.
  example:
  ```json
  {
    "action": "fetch",
    "parameters": {
      "kind": "import",
      "reason": "The reason explained.",
      "match": "Regex here."
    }
  }
  ```

## Issues
### Issue 1
Issue To Fix: Replace the `javax.ejb` import statement with `jakarta.ejb`
Line number: 3

### Issue 2
Issue To Fix: Replace the `javax.ejb` import statement with `jakarta.ejb`
Line number: 4

### Issue 3
Issue To Fix: Replace the `javax.inject` import statement with `jakarta.inject`
Line number: 5

### Issue 4
Issue To Fix: Replace the `javax.jms` import statement with `jakarta.jms`
Line number: 6

### Issue 5
Issue To Fix: Replace the `javax.jms` import statement with `jakarta.jms`
Line number: 7

### Issue 6
Issue To Fix: Replace the `javax.jms` import statement with `jakarta.jms`
Line number: 8

### Issue 7
Issue To Fix: Replace the `javax.jms` import statement with `jakarta.jms`
Line number: 9

### Issue 8
Issue To Fix: Stateless EJBs can be converted to a CDI bean by replacing the `@Stateless` annotation with a scope eg `@ApplicationScoped`
Line number: 12

### Issue 9
Issue To Fix: Enterprise Java Beans (EJBs) are not supported in Quarkus. CDI must be used.
 Please replace the `@MessageDriven` annotation with a CDI scope annotation like `@ApplicationScoped`.
Line number: 14

### Issue 10
Issue To Fix: The `destinationLookup` property can be migrated by annotating a message handler method (potentially `onMessage`) with the
 `org.eclipse.microprofile.reactive.messaging.Incoming` annotation, indicating the name of the queue as a value:
 
 Before:
 ```
 @MessageDriven(name = "HelloWorldQueueMDB", activationConfig = 
 public class MessageListenerImpl implements MessageListener 
 }}
 ```
 
 After:
 ```
 public class MessageListenerImpl implements MessageListener 
 }}
 ```
Line number: 15

### Issue 11
Issue To Fix: The `destinationLookup` property can be migrated by annotating a message handler method (potentially `onMessage`) with the
 `org.eclipse.microprofile.reactive.messaging.Incoming` annotation, indicating the name of the queue as a value:
 
 Before:
 ```
 @MessageDriven(name = "HelloWorldQueueMDB", activationConfig = 
 public class MessageListenerImpl implements MessageListener 
 }}
 ```
 
 After:
 ```
 public class MessageListenerImpl implements MessageListener 
 }}
 ```
Line number: 26

### Issue 12
Issue To Fix: The `destinationLookup` property can be migrated by annotating a message handler method (potentially `onMessage`) with the
 `org.eclipse.microprofile.reactive.messaging.Incoming` annotation, indicating the name of the queue as a value:
 
 Before:
 ```
 @MessageDriven(name = "HelloWorldQueueMDB", activationConfig = 
 public class MessageListenerImpl implements MessageListener 
 }}
 ```
 
 After:
 ```
 public class MessageListenerImpl implements MessageListener 
 }}
 ```
Line number: 16

### Issue 13
Issue To Fix: The `destinationLookup` property can be migrated by annotating a message handler method (potentially `onMessage`) with the
 `org.eclipse.microprofile.reactive.messaging.Incoming` annotation, indicating the name of the queue as a value:
 
 Before:
 ```
 @MessageDriven(name = "HelloWorldQueueMDB", activationConfig = 
 public class MessageListenerImpl implements MessageListener 
 }}
 ```
 
 After:
 ```
 public class MessageListenerImpl implements MessageListener 
 }}
 ```
Line number: 17

### Issue 14
Issue To Fix: References to JavaEE/JakartaEE JMS elements should be removed and replaced with their Quarkus SmallRye/Microprofile equivalents.
Line number: 6

### Issue 15
Issue To Fix: References to JavaEE/JakartaEE JMS elements should be removed and replaced with their Quarkus SmallRye/Microprofile equivalents.
Line number: 7

### Issue 16
Issue To Fix: References to JavaEE/JakartaEE JMS elements should be removed and replaced with their Quarkus SmallRye/Microprofile equivalents.
Line number: 8

### Issue 17
Issue To Fix: References to JavaEE/JakartaEE JMS elements should be removed and replaced with their Quarkus SmallRye/Microprofile equivalents.
Line number: 9


## Output
A json block for each action grouped by issue.
Ensure json block has markdown syntax highlighting.
Example:
## Issue: 1-4
```json
  {
    "action": "fetch",
    "parameters": {
      "kind": "import",
      "reason": "The reason explained.",
      "match": "Regex here."
    }
  }
  ```
  ## Issue: 4,5
  ```json
  {
    "action": "fetch",
    "parameters": {
      "kind": "import",
      "reason": "The reason explained.",
      "match": "Regex here."
    }
  }
  ```
